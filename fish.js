/* * * * * * * * * * * *
 *
 *   GO FISH GAME
 *     by breadworms,
 *    inspired by `fish` by futurecreep
 *    and `kirbyFishing` by 2547techno
 *
 *    Let's go fish!
 *
 * * * * * * * * * * */

class Ocean {
  constructor(width, height, map) {
    this.width = width;
    this.height = height;
    this.map = map;
  }

  fish(long, deep) {
    // Hardcoded: `10` max for short/shallow, `1` min offset for long/deep.
    const distance = Math.floor(Math.random() * (long ? this.width - 1 : 10)) + (long ? 1 : 0);
    const depth = Math.floor(Math.random() * (deep ? this.height - 1 : 10)) + (deep ? 1 : 0);
    const coord = depth * this.width + distance;

    if (this.map[coord] === '🟦') {
      return [false, 0.0];
    }

    return [
      this.map[coord],
      Math.round(Math.random() * (distance + 1) * (depth + 1) * 100) / 100
    ];
  }
}

function makeGear(inventory, gear) {
  const index = inventory.findIndex(gear);

  if (index === -1) {
    return [false, () => false];
  }

  return [true, weight => Math.random() * 100 < weight / 2 && inventory.splice(index, 1)];
}

function updateRecord(history, fish, weight) {
  const record = history.find(r => r.fish === fish);

  if (record === undefined) {
    history.push({
      fish: fish,
      smallestWeight: weight,
      smallestDate: Date.now(),
      biggestWeight: weight,
      biggestDate: Date.now()
    });

    return;
  }

  if (record.smallestWeight > weight) {
    record.smallestWeight = weight;
    record.smallestDate = Date.now();
  }

  if (record.biggestWeight < weight) {
    record.biggestWeight = weight;
    record.biggestDate = Date.now();
  }
}

function main(inputArgs) {
  const now = new Date();
  const player = JSON.parse(customData.get('gofishgame') ?? { inventory: [], history: [], canFishDate: now });
  const canFish = new Date(player.canFishDate) - now;

  if (canFish > 0) {
    return `Ready to fish in ${canFish < 60000 ? Math.ceil(canFish / 1000) + 's' : Math.ceil(canFish / 1000 / 60) + 'm'}.`;
  }

  const [hasLure, useLure] = makeGear(player.inventory, '🎏');
  const [hasHook, useHook] = makeGear(player.inventory, '🪝');

  const ocean = normalOcean;
  const [fish, weight] = ocean.fish(hasLure, hasHook);

  if (fish === false) {
    player.canFishDate = now + 30000;

    return 'No luck... (30s cooldown)';
  }

  let resp = `You caught a ✨ ${fish} ✨! It weighs ${weight} lbs.`;

  player.inventory.push(fish);
  updateRecord(player.history, fish, weight);

  const hasDavyJonsegSet = player.inventory.includes('🗡️')
    && player.inventory.includes('👑')
    && player.inventory.includes('🧭');

  if (hasDavyJonsegSet && hasLure && hasHook) {
    const [eatenFish, eatenWeight] = ocean.fish(true, true);

    if (eatenFish !== false && eatenWeight < weight) {
      player.inventory.push(eatenFish);
      updateRecord(player.history, eatenFish, eatenWeight);

      resp += ` And!... ${eatenFish} (${weight} lbs) was in its mouth!`;
    }
  }

  resp += `${useLure(weight) && ' 🎏 broke!💢'}`
    + `${useHook(weight) && ' 🪝 broke!💢' }`
    + ` (30m cooldown after a catch)`

  player.canFishDate = now + 1800000;

  customData.set('gofishgame', JSON.stringify(player));
}

/*
 * interface GoFishGame {
 *   inventory: string[],
 *   history: {
 *     fish: string,
 *     smallestWeight: number,
 *     smallestDate: string,
 *     biggestWeight: number,
 *     biggestDate: string
 *   }[],
 *   canFishDate: string
 * }
 */

const normalOcean = new Ocean(20, 20, [
  // 1    2     3     4     5       6     7     8      9     10     11    12    13     14    15     16    17     18    19     20
  '🌿', '🧦', '🪝', '🪝', '🐸', '🟦', '🟦', '🟦', '🟦', '🟦', '🕷️', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🐍', // 1
  '🎏', '🐚', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🐠', '🪸', '🐡', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 2
  '🦀', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 3
  '🎏', '🟦', '🟦', '🐟', '🐟', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🗡️', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 4
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 5
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 6
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🐬', '🟦', '🟦', '🟦', '🟦', '🐙', '🟦', // 7
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 8
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🐋', '🟦', '🟦', '🟦', '🟦', // 9
  '💀', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 10
  '🐌', '🟦', '🦐', '🟦', '🟦', '🟦', '🐢', '🦑', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 11
  '🦂', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 12
  '🟦', '🟦', '🦪', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 13
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 14
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🐊', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🦕', '🟦', '🟦', // 15
  '🟦', '🟦', '🟦', '🦞', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 16
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 17
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🦈', '🟦', '🟦', '🟦', '🟦', '🐉', '🟦', '🟦', '🟦', // 18
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🐳', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 19
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦' // 20
]);

const rainyOcean = new Ocean(20, 20, [
  // 1    2     3     4     5       6     7     8      9     10     11    12    13     14    15     16    17     18    19     20
  '🌿', '🧦', '🪝', '🪝', '🟦', '🟦', '🟦', '🟦', '🐸', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🐍', // 1
  '🎏', '🐚', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🐠', '🪸', '🐡', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 2
  '🎏', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🕷️', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 3
  '🟦', '🟦', '🟦', '🐟', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 4
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🐬', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 5
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 6
  '🦀', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🐋', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 7
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🐟', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 8
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 9
  '💀', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🐙', // 10
  '🟦', '🟦', '🟦', '🐢', '🟦', '🟦', '🟦', '🦑', '🟦', '🟦', '🧜‍♀️', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 11
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🐊', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 12
  '🟦', '🟦', '🦪', '🟦', '🟦', '👑', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 13
  '🟦', '🟦', '🟦', '🟦', '🦐', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 14
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🦕', '🟦', '🟦', // 15
  '🐌', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 16
  '🦂', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 17
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🦈', '🟦', '🟦', '🟦', '🟦', '🐉', '🟦', '🟦', '🟦', // 18
  '🟦', '🟦', '🟦', '🟦', '🦞', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🐳', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 19
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦' // 20
]);

const icyOcean = new Ocean(10, 40, [
  // 1    2     3     4     5       6    7     8      9      10
  '🧣', '⛸️', '🪝', '🪝', '🐸', '🟦', '🟦', '🟦', '🟦', '🟦', // 1
  '🪝', '🐚', '🟦', '🐟', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 2
  '🦀', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🐧', // 3
  '🪝', '🟦', '🟦', '🟦', '🐟', '🟦', '🟦', '🟦', '🟦', '🟦', // 4
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 5
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 6
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 7
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 8
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 9
  '💀', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 10
  '🐌', '🧭', '🦐', '🟦', '🟦', '🟦', '🐢', '🟦', '🟦', '🟦', // 11
  '🦂', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 12
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 13
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 14
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🐊', // 15
  '🟦', '🟦', '🟦', '🦞', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 16
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 17
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 18
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🦪', '🟦', '🟦', '🟦', // 19
  '🐍', '🟦', '🟦', '🟦', '🐬', '🟦', '🟦', '🟦', '🟦', '🟦', // 20
  '🟦', '🟦', '🟦', '🟦', '🟦', '🐋', '🟦', '🟦', '🟦', '🟦', // 21
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 22
  '🟦', '🟦', '🟦', '🦭', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 23
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🐳', '🟦', // 24
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 25
  '🟦', '🐙', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 26
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 27
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 28
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 29
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 30
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🦈', // 31
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 32
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 33
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 34
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 35
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 36
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 37
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', // 38
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🦑', '🟦', '🟦', // 39
  '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦', '🟦' // 40
]);
